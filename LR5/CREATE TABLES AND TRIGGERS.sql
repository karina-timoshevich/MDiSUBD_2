CREATE TABLE employees_history (
  hist_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  employee_id NUMBER,
  name VARCHAR2(100 CHAR),
  hire_date DATE,
  operation_type VARCHAR2(10), -- INSERT, UPDATE, DELETE
  operation_time TIMESTAMP DEFAULT SYSTIMESTAMP,
  user_name VARCHAR2(30),
  source_table_id NUMBER
);

CREATE TABLE departments_history (
  hist_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  department_id NUMBER,
  department_name VARCHAR2(100 CHAR),
  budget NUMBER(12, 2),
  operation_type VARCHAR2(10),
  operation_time TIMESTAMP DEFAULT SYSTIMESTAMP,
  user_name VARCHAR2(30),
  source_table_id NUMBER
);

CREATE TABLE tasks_history (
  hist_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
  task_id NUMBER,
  employee_id NUMBER,
  task_name VARCHAR2(200 CHAR),
  due_date DATE,
  operation_type VARCHAR2(10),
  operation_time TIMESTAMP DEFAULT SYSTIMESTAMP,
  user_name VARCHAR2(30),
  source_table_id NUMBER
);

CREATE OR REPLACE TRIGGER trg_employees_dml
AFTER INSERT OR UPDATE OR DELETE ON employees
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO employees_history (employee_id, name, hire_date, operation_type, user_name, source_table_id)
    VALUES (:NEW.employee_id, :NEW.name, :NEW.hire_date, 'INSERT', USER, :NEW.employee_id);
  ELSIF UPDATING THEN
    INSERT INTO employees_history (employee_id, name, hire_date, operation_type, user_name, source_table_id)
    VALUES (:OLD.employee_id, :OLD.name, :OLD.hire_date, 'UPDATE', USER, :OLD.employee_id);
  ELSIF DELETING THEN
    INSERT INTO employees_history (employee_id, name, hire_date, operation_type, user_name, source_table_id)
    VALUES (:OLD.employee_id, :OLD.name, :OLD.hire_date, 'DELETE', USER, :OLD.employee_id);
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_departments_dml
AFTER INSERT OR UPDATE OR DELETE ON departments
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO departments_history (department_id, department_name, budget, operation_type, user_name, source_table_id)
    VALUES (:NEW.department_id, :NEW.department_name, :NEW.budget, 'INSERT', USER, :NEW.department_id);
  ELSIF UPDATING THEN
    INSERT INTO departments_history (department_id, department_name, budget, operation_type, user_name, source_table_id)
    VALUES (:OLD.department_id, :OLD.department_name, :OLD.budget, 'UPDATE', USER, :OLD.department_id);
  ELSIF DELETING THEN
    INSERT INTO departments_history (department_id, department_name, budget, operation_type, user_name, source_table_id)
    VALUES (:OLD.department_id, :OLD.department_name, :OLD.budget, 'DELETE', USER, :OLD.department_id);
  END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_tasks_dml
AFTER INSERT OR UPDATE OR DELETE ON tasks
FOR EACH ROW
BEGIN
  IF INSERTING THEN
    INSERT INTO tasks_history (task_id, employee_id, task_name, due_date, operation_type, user_name, source_table_id)
    VALUES (:NEW.task_id, :NEW.employee_id, :NEW.task_name, :NEW.due_date, 'INSERT', USER, :NEW.task_id);
  ELSIF UPDATING THEN
    INSERT INTO tasks_history (task_id, employee_id, task_name, due_date, operation_type, user_name, source_table_id)
    VALUES (:OLD.task_id, :OLD.employee_id, :OLD.task_name, :OLD.due_date, 'UPDATE', USER, :OLD.task_id);
  ELSIF DELETING THEN
    INSERT INTO tasks_history (task_id, employee_id, task_name, due_date, operation_type, user_name, source_table_id)
    VALUES (:OLD.task_id, :OLD.employee_id, :OLD.task_name, :OLD.due_date, 'DELETE', USER, :OLD.task_id);
  END IF;
END;
/
